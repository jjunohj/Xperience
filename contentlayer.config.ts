import {
  FieldDefs,
  defineDocumentType,
  makeSource,
} from "contentlayer2/source-files";
import { readFileSync, writeFileSync, readdirSync } from "fs";
import { join } from "path";
import readingTime from "reading-time";
import rehypeAutolinkHeadings from "rehype-autolink-headings";
import rehypeExternalLinks from "rehype-external-links";
import rehypePrism from "rehype-prism-plus";
import rehypeSlug from "rehype-slug";
import remarkBreaks from "remark-breaks";
import remarkGfm from "remark-gfm";

import rehypeCodeWrap from "./src/libs/rehypeCodeWrap";

const fields: FieldDefs = {
  title: { type: "string", required: true },
  description: { type: "string", required: true },
  thumbnail: { type: "string", required: false },
  date: { type: "date", required: true },
  category: { type: "string", required: true },
  tags: { type: "list", of: { type: "string" }, required: false },
  summary: { type: "string", required: false },
};

const Post = defineDocumentType(() => ({
  name: "Post",
  filePathPattern: `**/*.mdx`,
  contentType: "mdx",
  fields,
  computedFields: {
    slug: {
      type: "string",
      resolve: (post) => `/${post._raw.flattenedPath}`,
    },
    readingMinutes: {
      type: "string",
      resolve: (post) => Math.ceil(readingTime(post.body.raw).minutes),
    },
    wordCount: {
      type: "number",
      resolve: (post) => post.body.raw.split(/\s+/gu).length,
    },
  },
}));

export default makeSource({
  contentDirPath: "posts",
  documentTypes: [Post],
  disableImportAliasWarning: true,
  onSuccess: async () => {
    const indexContent = `// NOTE This file is auto-generated by Contentlayer

export { isType } from 'contentlayer2/client'

// NOTE During development Contentlayer imports from '.mjs' files to improve HMR speeds.
// During (production) builds Contentlayer it imports from '.json' files to improve build performance.
import allPosts from './Post/_index.json'

export { allPosts }

export const allDocuments = [...allPosts]
`;
    writeFileSync(".contentlayer/generated/index.mjs", indexContent);

    const generatedDir = ".contentlayer/generated";
    function fixMjsFiles(dir: string) {
      const files = readdirSync(dir, { withFileTypes: true });

      for (const file of files) {
        const fullPath = join(dir, file.name);

        if (file.isDirectory()) {
          fixMjsFiles(fullPath);
        } else if (file.name.endsWith(".mjs")) {
          const content = readFileSync(fullPath, "utf-8");
          const fixedContent = content.replace(/ with \{ type: 'json' \}/g, "");
          if (content !== fixedContent) {
            writeFileSync(fullPath, fixedContent);
          }
        }
      }
    }

    fixMjsFiles(generatedDir);
  },
  mdx: {
    remarkPlugins: [remarkGfm, remarkBreaks] as any,
    rehypePlugins: [
      rehypeSlug,
      rehypeCodeWrap,
      rehypePrism,
      [
        rehypeAutolinkHeadings,
        {
          properties: {
            className: ["anchor"],
            ariaLabel: "anchor",
          },
        },
      ],
      [
        rehypeExternalLinks,
        {
          target: "_blank",
          rel: ["noopener noreferrer"],
        },
      ],
    ] as any,
  },
});
